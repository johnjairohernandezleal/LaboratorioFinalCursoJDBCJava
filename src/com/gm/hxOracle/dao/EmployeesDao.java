/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.gm.hxOracle.dao;

import java.util.Date;
import com.gm.hxOracle.dto.*;
import com.gm.hxOracle.exceptions.*;

public interface EmployeesDao
{
	/** 
	 * Inserts a new row in the EMPLOYEES table.
	 */
	public EmployeesPk insert(Employees dto) throws EmployeesDaoException;

	/** 
	 * Updates a single row in the EMPLOYEES table.
	 */
	public void update(EmployeesPk pk, Employees dto) throws EmployeesDaoException;

	/** 
	 * Deletes a single row in the EMPLOYEES table.
	 */
	public void delete(EmployeesPk pk) throws EmployeesDaoException;

	/** 
	 * Returns the rows from the EMPLOYEES table that matches the specified primary-key value.
	 */
	public Employees findByPrimaryKey(EmployeesPk pk) throws EmployeesDaoException;

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'EMPLOYEE_ID = :employeeId'.
	 */
	public Employees findByPrimaryKey(int employeeId) throws EmployeesDaoException;

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria ''.
	 */
	public Employees[] findAll() throws EmployeesDaoException;

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'MANAGER_ID = :managerId'.
	 */
	public Employees[] findByEmployees(int managerId) throws EmployeesDaoException;

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'EMPLOYEE_ID = :employeeId'.
	 */
	public Employees[] findWhereEmployeeIdEquals(int employeeId) throws EmployeesDaoException;

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'FIRST_NAME = :firstName'.
	 */
	public Employees[] findWhereFirstNameEquals(String firstName) throws EmployeesDaoException;

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'LAST_NAME = :lastName'.
	 */
	public Employees[] findWhereLastNameEquals(String lastName) throws EmployeesDaoException;

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'EMAIL = :email'.
	 */
	public Employees[] findWhereEmailEquals(String email) throws EmployeesDaoException;

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'PHONE_NUMBER = :phoneNumber'.
	 */
	public Employees[] findWherePhoneNumberEquals(String phoneNumber) throws EmployeesDaoException;

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'HIRE_DATE = :hireDate'.
	 */
	public Employees[] findWhereHireDateEquals(Date hireDate) throws EmployeesDaoException;

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'JOB_ID = :jobId'.
	 */
	public Employees[] findWhereJobIdEquals(String jobId) throws EmployeesDaoException;

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'SALARY = :salary'.
	 */
	public Employees[] findWhereSalaryEquals(float salary) throws EmployeesDaoException;

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'COMMISSION_PCT = :commissionPct'.
	 */
	public Employees[] findWhereCommissionPctEquals(float commissionPct) throws EmployeesDaoException;

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'MANAGER_ID = :managerId'.
	 */
	public Employees[] findWhereManagerIdEquals(int managerId) throws EmployeesDaoException;

	/** 
	 * Returns all rows from the EMPLOYEES table that match the criteria 'DEPARTMENT_ID = :departmentId'.
	 */
	public Employees[] findWhereDepartmentIdEquals(int departmentId) throws EmployeesDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the EMPLOYEES table that match the specified arbitrary SQL statement
	 */
	public Employees[] findByDynamicSelect(String sql, Object[] sqlParams) throws EmployeesDaoException;

	/** 
	 * Returns all rows from the EMPLOYEES table that match the specified arbitrary SQL statement
	 */
	public Employees[] findByDynamicWhere(String sql, Object[] sqlParams) throws EmployeesDaoException;

}
